<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use SevenGps\PayUnit;
use Illuminate\Support\Str;
use \App\Models\Vote;

class PayUnitController extends Controller
{
    //




    public function pay(Request $request)
    {
        // dd($request->all());

        define('DEVELOPER_KEY', '$u1XQ2ic$my$yPda5vMkYiO0zs7.ye9zSLeS4f.VZWbZpC1F8DpCFjQeS2I_88501402695f74bf1339c77290d471c970d0dd57d203f3a097d2544aee5765a405b236c7');
        define('SUBSCRIPTION_KEY', 'fe5dbbcea5ce7e2988b8c69bcfdfde8904aabc1f_3bd4c2531e5d59fc3183d8c816f12ca2');

        $amount = intval($request->number_of_votes) * 100;

        $curl = curl_init();
        curl_setopt_array($curl, [
        CURLOPT_URL 		   => 'https://api.noupia.com/pay',
        CURLOPT_RETURNTRANSFER => true,
        CURLOPT_ENCODING 	   => "",
        CURLOPT_MAXREDIRS 	   => 10,
        CURLOPT_TIMEOUT 	   => 30,
        CURLOPT_HTTP_VERSION   => CURL_HTTP_VERSION_1_1,
        CURLOPT_CUSTOMREQUEST  => "POST",
        CURLOPT_POSTFIELDS     => json_encode([
            // (string) [required] Specify the operation "initiate"
            'operation'	 	=> 'initiate',
            // (string) [required] Item reference e.g SCHOOL FEES
            'reference'     => 'Voting For an Individual',
            // (int) [required] Item cost
            'amount' 		=> intval($amount),
            // (int) [required] Mobile Money account number. No phone code.
            'phone' 		=> $request->phone,
            // (string) [required] Payment method: mobilemoney, noupia, invoice or withdraw.
            //(WARNING: "withdraw" will transfer funds to the Mobile Money account number "phone" provided)
            'method' 		=> 'mobilemoney',
            // (string) [optional] Customer country code (iso-2 format)	e.g CM, NG, SN, FR, US
            'country' 		=> 'CM',
            // (string) [optional] Charge currency. Default is XAF. Visit https://noupia.com/rates for currency exchange rates
            'currency' 		=> 'XAF',
            // (string) [optional] Your customer's email address. If provided, a receipt will be sent to customer upon successful payment.
            'email' 		=> 'your.customer@email.com',
            // (string) [optional] Your customer's name.  E.g John Doe
            'name' 			=> 'YOUR CUSTOMER NAME',
        ]),
        CURLOPT_HTTPHEADER => [
                'Accept: */*',
                'Content-Type: application/json',
                'Noupia-API-Signature: np-live',
                'Noupia-API-Key: '.DEVELOPER_KEY,
                'Noupia-Product-Key: '.SUBSCRIPTION_KEY
            ],
        ]);

        $response = curl_exec($curl);
        $error = curl_error($curl);
        $close = curl_close($curl);

        if ($error) {
            return response()->json([
                'error' => $error,
                'message' => 'network-error'
            ]);
            // printf('cURL Error :%s', $error);
        }
        else {

            $result = json_decode($response);
            // dd($result->data->transaction);
            if($result->response === 'success') {

                return response()->json([
                    'transactionId' => $result->data->transaction,
                    'status' => 'success',
                    'userId' => $request->contestantId
                ]);

                // $this->verifyNoupiaPayment($result->data->transaction);
            }else{
                return response()->json([
                    'result' => $result
                ]);
            }


            /**
             * Example of a failed JSON response
             * {
                 "response": "error",
                "code": "PAYMENT_INIT_ERROR",
                "message": "Oops, payment could not be initiated. Verify parameters and try again.",
                "data": null
                }
            *
            * Example of a successful JSON response
            * {
                "response": "success",
                "code": "OPERATION_SUCCESSFUL",
                "message": "Payment initiated successfully ✔",
                "data": {
                    "transaction": "PAYCM020320231258210916331657",
                    "channel_ussd": "*126#",
                    "channel_name": "CM MTN MOBILEMONEY"
                }
                }
            *
            */

            // $responseStatus = $result->response; 	      // "success" or "error"
            // $responseMessage = $result->message; 		  // A detailed description of the response

            // $transactionId = $result->data->transaction;
            /**
             * A unique transaction ID generated by Noupia.
             * This will later be used to verify the status of the payment.
             * Save this $transactionId in your system for later use in the function "verifyNoupiaPayment()"
             *
             */
        }



    }


    public function verifyNoupiaPayment($transactionId, $userId)
    {
        define('DEVELOPERR_KEY', '$u1XQ2ic$my$yPda5vMkYiO0zs7.ye9zSLeS4f.VZWbZpC1F8DpCFjQeS2I_88501402695f74bf1339c77290d471c970d0dd57d203f3a097d2544aee5765a405b236c7');
        define('SUBSCRIPTIONN_KEY', 'fe5dbbcea5ce7e2988b8c69bcfdfde8904aabc1f_3bd4c2531e5d59fc3183d8c816f12ca2');

        $curl = curl_init();
        curl_setopt_array($curl, [
        CURLOPT_URL 		   => 'https://api.noupia.com/pay',
        CURLOPT_RETURNTRANSFER => true,
        CURLOPT_ENCODING 	   => "",
        CURLOPT_MAXREDIRS 	   => 10,
        CURLOPT_TIMEOUT 	   => 30,
        CURLOPT_HTTP_VERSION   => CURL_HTTP_VERSION_1_1,
        CURLOPT_CUSTOMREQUEST  => "POST",
        CURLOPT_POSTFIELDS     => json_encode([
            'operation'	 	   => 'verify', 					   // (string) [required] Specify the operation "verify"
            'transaction'      => $transactionId, // (string) [required] Transaction ID returned by Noupia.
        ]),
        CURLOPT_HTTPHEADER => [
                'Accept: */*',
                'Content-Type: application/json',
                'Noupia-API-Signature: np-live',
                'Noupia-API-Key: '.DEVELOPERR_KEY,
                'Noupia-Product-Key: '.SUBSCRIPTIONN_KEY
            ],
        ]);

        $response = curl_exec($curl);
        $error = curl_error($curl);
        $close = curl_close($curl);

        if ($error) {
            printf('cURL Error :%s', $error);
        }
        else {
            $result = json_decode($response);

            /**
             * Example of a successful JSON response;
             *
             * {
                 "response": "success",
                "code": "OPERATION_SUCCESSFUL",
                "message": "Transaction was completed successfully ✔",
                "data": {
                    "transaction": "PAYCM050320231328588367392783",
                    "type": "pay",
                    "status": "successful",
                    "amount": "100",
                    "fee": "2",
                    "currency": "XAF",
                    "reference": "GARRI AND ERU",
                    "description": "MOBILEMONEY 671234567",
                    "date": "05-03-2023",
                    "time": "13:29:03",
                    "timestamp": 1678019343,
                    "method": "MOBILEMONEY",
                    "payer": "671234567",
                    "call": "API",
                    "country": "CM",
                    "ip": "661.29.147.22",
                    "metadata": "omarestaurant"
                }
                }
            *
            */

            $transactionStatus = $result->data->status;
            if($transactionStatus === 'successful') {

                //Check if DB Already Contains Transaction the do not insert
                $checkVote = Vote::where('transaction_id', $transactionId)->first();
                if(!$checkVote){
                     //Insert Into Votes Table
                    $voter = new Vote();
                    $voter->user_id = $userId;
                    $voter->amount = $result->data->amount;
                    $voter->transaction_id = $transactionId;
                    $voter->save();

                    session()->flash('success', 'Vote Was Successful');
                    return redirect()->route('contestants.index');
                }else{
                    session()->flash('success', 'Vote Was Successful');
                    return redirect()->route('contestants.index');
                }


            }

            else if($transactionStatus === 'failed') {
                session()->flash('error', 'Transaction Failed, or Transaction was cancelled. Your vote was not counted. Please try to vote again.');
                return redirect()->route('contestants.index');
            }
            // if($transactionStatus === 'successful') {
            //     dd($result);
            // }

            /**
             * $transactionStatus value will be;
             *
             * "successful" if the payment was completed by customer.
             * "failed" 	if the payment was timed out or customer cancelled.
             * "pending" 	if the customer is still to validate.
             */
        }
    }


    // public function pay(Request $request)
    // {
    //     define('DEVELOPER_KEY', 'np2j9bH.Ly94f0$iGuw7Zyf4lY$qBTeCsE$GI01AnRiZ1awYMEVfWcCZY6Xb_89a36cd9aaf630662eb815fb511da8be84e42bb544d9c2e3b4c516b25b2012001b56dd25');
    //     define('SUBSCRIPTION_KEY', 'c1dfd96eea8cc2b62785275bca38ac261256e278_fa66ff9543dcd6b34b517ac4cb783b88');
    //     // $transaction_id = uniqid();

    //     $total_amount = $request->amount;

    //     $transaction_id = Str::random(20);
    //     // dd($transaction_id);

    //     $myPayment = new PayUnit(
    //         "sand_AIu3IYCjIvbcp6y7AE7JQZ8v6w6Oju", //api key
    //         "36367b96-2e49-43a8-8c8d-7bd69bc0d92f", //api_password
    //         "4f121c9f-d750-4140-817d-2d629edfcae8", //api username
    //         "http://localhost/misskills/public/payunit-return", //Return Url
    //         "http://localhost/misskills/public/payunit-notify", //NOtify Url
    //         "test", //mode
    //         "some description", //Description
    //         "Something", //purchase reference
    //         "XAF", //currency
    //         "Miss Skills", //name
    //         "$transaction_id", //transaction ID
    //         " "
    //     );

    //     $myPayment->makePayment($total_amount);


    // }

    public function payUnitReturnUrl(Request $request)
    {
        dd($request->all());
    }

    public function payUnitNotifyUrl(Request $request)
    {
        dd("Notify URL: ".$request->all());

    }



    // $myPayment = new PayUnit(
    //     "api_key",
    //     "api_password",
    //     "api_username",
    //     "returnUrl",
    //     "notifyUrl",
    //     "mode",
    //     "description",
    //     "purchaseRef",
    //     "currency",
    //     "name",
    //     "transactionId"
    // );

    // $myPayment->makePayment("total_amount");
}
